#include <iostream>

using namespace std;

//这里假设w[]物品的重量，v[]物品的价值，已经按照要求从小到大排序好了
void Knapsack(int n, float M, float v[], float w[], float x[]){
	int i;//定义变量i后面要多次使用i
	
	//初始化数组x
	for ( i = 1; i <= n; i++) x[i] = 0;

	//定义当前背包的容量大小
	float c = M;

	//循环遍历物品
	//注意，这里for执行完以后，i会被改变
	for ( i = 1; i <= n; i++){
		if (w[i] > c){
			//如果现在要装入的这个物品的重量已经大于背包剩余的重量了
			//那就直接退出循环
			break;	
		} else{
			x[i] = 1;//说明物品i还可以装入背包，并且，i可以整个都装入背包
			c -= w[i];//此时，当物品i装入背包以后，
					  //背包剩余的容量要减去背包的重量
		}
	}

	//如果，到最后了，还有物品没有装入背包
	//那就将最后的物品装入背包，但是，这个物品不能全部装入背包
	//能装入多少呢？
	//也就是背包剩余的容量除以生物物品i的质量
	if (i <= n) x[i] = c/w[i];
}

int main(){
	float M = 50; //定义背包的总容量
	float w[] = {0,10,20,30};//物品从下标1开始存储，下标0的元素没有物品。
							 //并且，物品按照质量从小到大排序
	float v[] = {0,60,100,120};//物品的价值同样从1开始存储
							   //物品的价值从小到大排序
	float x[50];//每个物品，存入背包的比例，如果全部存入了背包就是1
				 //如果，这个物品只有一半存入背包了，x[i] = 0.5;
	int n = (sizeof(w)/sizeof(w[0])) - 1; //计算一共有多少个物品
	Knapsack(n, M, v, w, x);

	for (int i = 1; i <= n; i++){
		cout << "物品" << i << "装入比例" << x[i] << endl;
	}
	return 0;
}
